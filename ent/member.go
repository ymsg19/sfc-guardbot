// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/ymsg19/sfc-guardbot/ent/member"
)

// Member is the model entity for the Member schema.
type Member struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// DiscordUID holds the value of the "discord_uid" field.
	DiscordUID string `json:"discord_uid,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// IsVerified holds the value of the "is_verified" field.
	IsVerified bool `json:"is_verified,omitempty"`
	// VerificationExpiry holds the value of the "verification_expiry" field.
	VerificationExpiry time.Time `json:"verification_expiry,omitempty"`
	// HashedVerificationToken holds the value of the "hashed_verification_token" field.
	HashedVerificationToken []byte `json:"-"`
	// VerificationTokenExpiry holds the value of the "verification_token_expiry" field.
	VerificationTokenExpiry time.Time `json:"verification_token_expiry,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Member) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case member.FieldHashedVerificationToken:
			values[i] = new([]byte)
		case member.FieldIsVerified:
			values[i] = new(sql.NullBool)
		case member.FieldID:
			values[i] = new(sql.NullInt64)
		case member.FieldDiscordUID, member.FieldEmail:
			values[i] = new(sql.NullString)
		case member.FieldVerificationExpiry, member.FieldVerificationTokenExpiry:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Member", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Member fields.
func (m *Member) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case member.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			m.ID = int(value.Int64)
		case member.FieldDiscordUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field discord_uid", values[i])
			} else if value.Valid {
				m.DiscordUID = value.String
			}
		case member.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				m.Email = value.String
			}
		case member.FieldIsVerified:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_verified", values[i])
			} else if value.Valid {
				m.IsVerified = value.Bool
			}
		case member.FieldVerificationExpiry:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field verification_expiry", values[i])
			} else if value.Valid {
				m.VerificationExpiry = value.Time
			}
		case member.FieldHashedVerificationToken:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field hashed_verification_token", values[i])
			} else if value != nil {
				m.HashedVerificationToken = *value
			}
		case member.FieldVerificationTokenExpiry:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field verification_token_expiry", values[i])
			} else if value.Valid {
				m.VerificationTokenExpiry = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Member.
// Note that you need to call Member.Unwrap() before calling this method if this Member
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Member) Update() *MemberUpdateOne {
	return (&MemberClient{config: m.config}).UpdateOne(m)
}

// Unwrap unwraps the Member entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Member) Unwrap() *Member {
	tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Member is not a transactional entity")
	}
	m.config.driver = tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Member) String() string {
	var builder strings.Builder
	builder.WriteString("Member(")
	builder.WriteString(fmt.Sprintf("id=%v", m.ID))
	builder.WriteString(", discord_uid=")
	builder.WriteString(m.DiscordUID)
	builder.WriteString(", email=")
	builder.WriteString(m.Email)
	builder.WriteString(", is_verified=")
	builder.WriteString(fmt.Sprintf("%v", m.IsVerified))
	builder.WriteString(", verification_expiry=")
	builder.WriteString(m.VerificationExpiry.Format(time.ANSIC))
	builder.WriteString(", hashed_verification_token=<sensitive>")
	builder.WriteString(", verification_token_expiry=")
	builder.WriteString(m.VerificationTokenExpiry.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Members is a parsable slice of Member.
type Members []*Member

func (m Members) config(cfg config) {
	for _i := range m {
		m[_i].config = cfg
	}
}
